@charset "utf-8";
//背景色透明
@mixin opacityColor($color, $trans) {
    $rgba: rgba($color, $trans);
    background: $rgba;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr="#{ie-hex-str($rgba)}", EndColorStr="#{ie-hex-str($rgba)}");
    .ie9 & {
        filter: none;
    }
}

//png24
@mixin opacityImage($path) {
    _background: none;
    _filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=noscale, src="#{$path}");
}

//IE6下用gif背景图片
@mixin opacityGif($path) {
    _background-image: url("#{$path}");
}

//背景图片拉伸
@mixin stretchedImage($path) {
    background-size: 100% 100%;
    filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src="#{$path}", sizingMethod="scale");
    -ms-filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src="#{$path}", sizingMethod="scale");
}

// Flexible Box
@mixin display-flex($display) {
    @include flexbox((display: box), 1);
    @include flexbox((display: $display));
}

@mixin flex($values) {
    @include flexbox((box-flex: $values), 1);
    @include flexbox((flex: $values));
}

@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

@mixin align-items($align-items) {
    @if $align-items==flex-start {
        @include flexbox((box-align: start), 1);
    }
    @else if $align-items==flex-end {
        @include flexbox((box-align: end), 1);
    }
    @else {
        @include flexbox((box-align: $align-items), 1);
    }
    @include flexbox((align-items: $align-items));
}

@mixin flex-direction($direction) {
    @if $direction==column {
        @include flexbox((box-orient: vertical), 1);
    }
    @if $direction==column-reverse {
        @include flexbox((box-orient: vertical), 1);
        @include flexbox((box-direction: reverse), 1);
    }
    @else if $direction==row {
        @include flexbox((box-orient: horizontal), 1);
    }
    @else if $direction==row-reverse {
        @include flexbox((box-orient: horizontal), 1);
        @include flexbox((box-direction: reverse), 1);
    }
    @include flexbox((flex-direction: $direction));
}

@mixin justify-content($justify-content) {
    @if $justify-content==flex-start {
        @include flexbox((box-pack: start), 1);
    }
    @else if $justify-content==flex-end {
        @include flexbox((box-pack: end), 1);
    }
    @else if $justify-content==center {
        @include flexbox((box-pack: center), 1);
    }
    @else if $justify-content==space-between {
        @include flexbox((box-pack: justify), 1);
    }
    @include flexbox((justify-content: $justify-content));
}
