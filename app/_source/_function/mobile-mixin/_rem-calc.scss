// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default; // $desgin:(27:720, 24:640, 18:480, 12:320 );
// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
$modules: () !default;
@mixin exports($name) {
    @if (index($modules, $name)==null) {
        $modules: append($modules, $name) !global;
        @content;
    }
    @else {
        @warn "已存在，请不要重复引用";
    }
}

// ======================
// @functions
// ======================
// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
// *
//  * 把px转换成rem
//  * @param  {Number,String} $value       要转换的值
//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px
//  * @return {Number,String}              转换后的值
 
@function convert-to-rem($value, $base-value: $rem-base) {
    // Check if the value is a number
    @if type-of($value) !='number' {
        @if $value !=auto {
            @warn inspect($value) + ' was passed to rem-calc(), which is not a number or "auto".';
        }
        @return $value;
    }
    // Calculate rem if units for $value is not rem
    @if unit($value) !='rem' {
        @if strip-unit($base-value) < 320 {
            $value: strip-unit($value) / strip-unit($base-value) * 1rem;
        }
        @else {
            $value: strip-unit($value) * 320 / strip-unit($base-value) / 12 * 1rem;
        }
    }
    // Turn 0rem into 0
    @if $value==0rem {
        $value: 0;
    }
    @return $value;
}


// *
//  * 将px转换成rem的具体实现
//  * @param  {Number,Array} $values      要转换的数值，活着一组要转换的数值
//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px
//  * @return {Number,String}              转换后的值
 
@function rem-calc($values, $base-value: $rem-base) {
    $rem-values: ();
    $count: length($values);
    @if $count==1 {
        @return convert-to-rem($values, $base-value);
    }
    @for $i from 1 through $count {
        $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $rem-values;
}
