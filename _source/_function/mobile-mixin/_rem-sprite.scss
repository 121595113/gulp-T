@mixin rem-sprite-width($sprite, $base-value: $rem-base) {
    width: rem-calc(nth($sprite, 5), $base-value);
}

@mixin rem-sprite-height($sprite, $base-value: $rem-base) {
    height: rem-calc(nth($sprite, 6), $base-value);
}

@mixin rem-sprite-position($sprite, $base-value: $rem-base) {
    $sprite-offset-x: strip-unit(nth($sprite, 3)) / (strip-unit(nth($sprite, 5)) - strip-unit(nth($sprite, 7))) * 100%;
    $sprite-offset-y: strip-unit(nth($sprite, 4)) / (strip-unit(nth($sprite, 6)) - strip-unit(nth($sprite, 8))) * 100%;
    background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin rem-sprite-image($sprite) {
    $sprite-image: nth($sprite, 9);
    background-image: url(#{$sprite-image});
}

@mixin rem-sprite($sprite, $base-value: $rem-base) {
    @include rem-sprite-image($sprite);
    @include rem-sprite-position($sprite, $base-value);
    @include rem-sprite-width($sprite, $base-value);
    @include rem-sprite-height($sprite, $base-value);
}


/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/

@mixin rem-sprites($sprites, $base-value: $rem-base, $separator:'-', $pre-name:null) {
    @if $pre-name==null {
        $pre-name: nth(nth($sprites, 1), 11);
    }
    @each $sprite in $sprites {
        $sprite-name: nth($sprite, 10);
        .#{$pre-name+$separator+$sprite-name} {
            @include rem-sprite($sprite, $base-value);
        }
    }
}
