{"version":3,"sources":["../../../_source/_function/mobile-mixin/_sprite.scss","../../../_source/_function/mobile-mixin/_rem-sprite.scss","sprites/_cur.scss","sprites/_cur1.scss","sprites/_aqi-icon.scss","style.scss","../../../_source/_function/mobile-mixin/_rem-calc.scss"],"names":[],"mappings":"AA0BA;;;;;EAKE;ACLF;;;;;EAKE;AC/BF;;;;;;;;;;;;EAYE;ACZF;;;;;;;;;;;;EAYE;ACZF;;;;;;;;;;;;EAYE;ACSF;EACC,qBAAc;EAAd,sBAAc;EAAd,kBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,gBAAgB;EAChB,eCkB6B;EL1B5B,qDAAuB;EALvB,gCK+B4B;ELzC5B,YKyC4B;ELrC5B,aKqC4B;CDhB7B;;AAED;EACC,YACA;CAAC","file":"style.css","sourcesContent":["@mixin sprite-width($sprite) {\r\n  width: nth($sprite, 5);\r\n}\r\n\r\n@mixin sprite-height($sprite) {\r\n  height: nth($sprite, 6);\r\n}\r\n\r\n@mixin sprite-position($sprite) {\r\n  $sprite-offset-x: nth($sprite, 3);\r\n  $sprite-offset-y: nth($sprite, 4);\r\n  background-position: $sprite-offset-x  $sprite-offset-y;\r\n}\r\n\r\n@mixin sprite-image($sprite) {\r\n  $sprite-image: nth($sprite, 9);\r\n  background-image: url(#{$sprite-image});\r\n}\r\n\r\n@mixin sprite($sprite) {\r\n  @include sprite-image($sprite);\r\n  @include sprite-position($sprite);\r\n  @include sprite-width($sprite);\r\n  @include sprite-height($sprite);\r\n}\r\n\r\n/*\r\nThe `sprites` mixin generates identical output to the CSS template\r\n  but can be overridden inside of SCSS\r\n\r\n@include sprites($spritesheet-sprites);\r\n*/\r\n@mixin sprites($sprites) {\r\n  @each $sprite in $sprites {\r\n    $sprite-name: nth($sprite, 10);\r\n    .#{$sprite-name} {\r\n      @include sprite($sprite);\r\n    }\r\n  }\r\n}","@mixin rem-sprite-width($sprite,$base-value: $rem-base) {\r\n  width: rem-calc(nth($sprite, 5),$base-value);\r\n}\r\n\r\n@mixin rem-sprite-height($sprite,$base-value: $rem-base) {\r\n  height: rem-calc(nth($sprite, 6),$base-value);\r\n}\r\n\r\n@mixin rem-sprite-position($sprite,$base-value: $rem-base) {\r\n  $sprite-offset-x: nth($sprite, 3);\r\n  $sprite-offset-y: nth($sprite, 4);\r\n  background-position: rem-calc($sprite-offset-x  $sprite-offset-y,$base-value);\r\n}\r\n\r\n@mixin rem-sprite-image($sprite) {\r\n  $sprite-image: nth($sprite, 9);\r\n  background-image: url(#{$sprite-image});\r\n}\r\n\r\n@mixin rem-sprite($sprite,$base-value: $rem-base) {\r\n  @include rem-sprite-image($sprite);\r\n  @include rem-sprite-position($sprite,$base-value);\r\n  @include rem-sprite-width($sprite,$base-value);\r\n  @include rem-sprite-height($sprite,$base-value);\r\n}\r\n\r\n/*\r\nThe `sprites` mixin generates identical output to the CSS template\r\n  but can be overridden inside of SCSS\r\n\r\n@include sprites($spritesheet-sprites);\r\n*/\r\n@mixin rem-sprites($sprites,$base-value: $rem-base) {\r\n  @each $sprite in $sprites {\r\n    $sprite-name: nth($sprite, 10);\r\n    .#{$sprite-name} {\r\n      @include rem-sprite($sprite,$base-value);\r\n    }\r\n  }\r\n}","/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n$cur-lv2: (0px, 0px, 0px, 0px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv2', );\r\n$cur-lv3: (80px, 0px, -80px, 0px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv3', );\r\n$cur-lv4: (160px, 0px, -160px, 0px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv4', );\r\n$cur-lv5: (0px, 92px, 0px, -92px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv5', );\r\n$cur-lv6: (80px, 92px, -80px, -92px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv6', );\r\n$cur-lv7-hover: (160px, 92px, -160px, -92px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv7-hover', );\r\n$cur-lv7: (240px, 0px, -240px, 0px, 76px, 88px, 316px, 180px, '../images/cur-sprite.png', 'lv7', );\r\n$cur-sprites: ($cur-lv2, $cur-lv3, $cur-lv4, $cur-lv5, $cur-lv6, $cur-lv7-hover, $cur-lv7, );\r\n\n\n","/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n$cur1-lv-2: (0px, 0px, 0px, 0px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-2', );\r\n$cur1-lv-3: (80px, 0px, -80px, 0px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-3', );\r\n$cur1-lv-4: (160px, 0px, -160px, 0px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-4', );\r\n$cur1-lv-5: (0px, 92px, 0px, -92px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-5', );\r\n$cur1-lv-6: (80px, 92px, -80px, -92px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-6', );\r\n$cur1-lv-7: (160px, 92px, -160px, -92px, 76px, 88px, 236px, 180px, '../images/cur1-sprite.png', 'lv-7', );\r\n$cur1-sprites: ($cur1-lv-2, $cur1-lv-3, $cur1-lv-4, $cur1-lv-5, $cur1-lv-6, $cur1-lv-7, );\r\n\n\n","/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n$aqi-icon-lv1: (0px, 0px, 0px, 0px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv1', );\r\n$aqi-icon-lv2: (36px, 0px, -36px, 0px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv2', );\r\n$aqi-icon-lv3: (0px, 36px, 0px, -36px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv3', );\r\n$aqi-icon-lv4: (36px, 36px, -36px, -36px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv4', );\r\n$aqi-icon-lv5: (72px, 0px, -72px, 0px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv5', );\r\n$aqi-icon-lv6: (72px, 36px, -72px, -36px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv6', );\r\n$aqi-icon-lv7: (0px, 72px, 0px, -72px, 32px, 32px, 104px, 104px, '../images/aqi-icon-sprite.png', 'lv7', );\r\n$aqi-icon-sprites: ($aqi-icon-lv1, $aqi-icon-lv2, $aqi-icon-lv3, $aqi-icon-lv4, $aqi-icon-lv5, $aqi-icon-lv6, $aqi-icon-lv7, );\r\n\n\n","@import \"../../../_source/_function/mobile-mixin\";\r\n@import \"./sprites/cur\";\r\n@import \"./sprites/cur1\";\r\n@import \"./sprites/aqi-icon\";\r\n\r\n// .head{\r\n// \tfont-size: rem-calc(80);\r\n// }\r\n\r\n// @include rem-sprites(\"cur/*.png\");\r\n\r\n// body{\r\n// \tbackground: green;\r\n// \topacity: 0.5;\r\n// }\r\n\r\n// div{\r\n// \t// @include rem-sprite(\"cur/*.png\",lv1);\r\n// }\r\n\r\n\r\nbody{\r\n\tdisplay: flex;\r\n\tbackground: red;\r\n\twidth: rem-calc(100);\r\n\t@include rem-sprite($aqi-icon-lv3,16);\r\n}\r\n\r\nh1{\r\n\tcolor: blue\r\n}\r\n// @include sprites($cur-sprites);\r\n\r\n","// This is the default html and body font-size for the base rem value.\r\n$rem-base: 16px !default; // $desgin:(27:720, 24:640, 18:480, 12:320 );\r\n// IMPORT ONCE\r\n// We use this to prevent styles from being loaded multiple times for compenents that rely on other components. \r\n$modules: () !default;\r\n@mixin exports($name) {\r\n    @if (index($modules, $name)==null) {\r\n        $modules: append($modules, $name) !global;\r\n        @content;\r\n    }\r\n    @else {\r\n        @warn \"已存在，请不要重复引用\";\r\n    }\r\n}\r\n\r\n// ======================\r\n// @functions\r\n// ======================\r\n// STRIP UNIT\r\n// It strips the unit of measure and returns it\r\n@function strip-unit($num) {\r\n    @return $num / ($num * 0 + 1);\r\n}\r\n\r\n// CONVERT TO REM\r\n// *\r\n//  * 把px转换成rem\r\n//  * @param  {Number,String} $value       要转换的值\r\n//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px\r\n//  * @return {Number,String}              转换后的值\r\n \r\n@function convert-to-rem($value, $base-value: $rem-base) {\r\n    // Check if the value is a number\r\n    @if type-of($value) !='number' {\r\n        @if $value !=auto {\r\n            @warn inspect($value) + ' was passed to rem-calc(), which is not a number or \"auto\".';\r\n        }\r\n        @return $value;\r\n    }\r\n    // Calculate rem if units for $value is not rem\r\n    @if unit($value) !='rem' {\r\n        @if strip-unit($base-value) < 320 {\r\n            $value: strip-unit($value) / strip-unit($base-value) * 1rem;\r\n        }\r\n        @else {\r\n            $value: strip-unit($value) * 320 / strip-unit($base-value) / 12 * 1rem;\r\n        }\r\n    }\r\n    // Turn 0rem into 0\r\n    @if $value==0rem {\r\n        $value: 0;\r\n    }\r\n    @return $value;\r\n}\r\n\r\n\r\n// *\r\n//  * 将px转换成rem的具体实现\r\n//  * @param  {Number,Array} $values      要转换的数值，活着一组要转换的数值\r\n//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px\r\n//  * @return {Number,String}              转换后的值\r\n \r\n@function rem-calc($values, $base-value: $rem-base) {\r\n    $rem-values: ();\r\n    $count: length($values);\r\n    @if $count==1 {\r\n        @return convert-to-rem($values, $base-value);\r\n    }\r\n    @for $i from 1 through $count {\r\n        $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));\r\n    }\r\n    @return $rem-values;\r\n}\r\n"],"sourceRoot":"/source/"}